---
layout: post
title: "One weird kernel trick for diverse recommendations"
date: 2022-11-01 00:00:00 -0700
categories: recommendation systems, diversity
tags: machine learning diversity recommendations
---


![vector space](/assets/img/vector-space.png)

Recommendation systems power what we buy, watch, and listen to.
These algorithms work by predicting the users actions, e.g. whether a user will watch a show
Naively, the top recommendations will all be similar to each other
But this is not the user experience we desire
instead, we want to introduce some diversity in the recommendations.
Here we discuss a simple and fast heuristic that diverifies recommendations.
To do so, we leverage some old ideas from portfolio optimization, combined with kernel functions.

## Markowitz optimization problem

[Markowitz model](https://en.wikipedia.org/wiki/Markowitz_model)
Create a portfolio of assets that trades off between maximizing returns and minimzing variance

$$ \max_{w: \|w\|_1 = 1} \sum_{i} w_i r_i - \rho \sum_{i, j} w_i w_j Cov(r_i, r_j) $$

Idea: you want to select assets with high returns, but there is uncertainty in returns.
Obviously we can put all our money in the single asset whose expected return we believe is the highest, but that would be risky.
Instead, we want to select a diverse set of assets that we believe give us reasonably strong returns, but without putting all our eggs in one basket.
But that does not just mean we want to spread our investments across more than one asset; we want to invest in assets that are very different from each other.
That is, where the correlation between returns is low.
E.g., if we invest only in technology stocks, we are exposed to the risk of the technology market collapsing, and with it all our investments.




## Kernels

Suppose we want to diversify the recommendations for a specific user
Two ingredients:
- Score of each (or top) items for this user
- A similarity measure between items

Getting scores for each item should be straightforward: it's the output of the recommendation system,
so let's focus on the similarity measure between items.




There are many approaches to recommendation algorithms
A common approach we find in many such algorithms is that final recommendations are generated by a dot product between a user and an item vector

